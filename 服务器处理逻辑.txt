当客户端连接到服务器时，此时只是建立了服务器和客户端的TCP连接。并未发送数据。
这里，我们或许需要一个专门的进程或者一个线程来处理客户的连接请求。
这个进程应该完成用户的登录操作。如果失败，发送错误信息给客户端。成功就将用户加入在线用户队列并且通知客户端。


当用户登录完成后。别加入了一个在线用户队列。此时与客户端的互相通讯就和登录进程无关了。
在线用户的维护有两种方式：
	一种是查询效率高的数据结构
	一种是数据库
我采用的是第一种。其实我并不知道那个更合适。感觉第二种更加方便。但是前者似乎更方便锻炼自己的算法和数据结构

因为我们是采用的长连接方式。长连接若长时间没有数据流便可能会断开。。应该需要考虑定时发送心跳包来保活。那么
当第一个用户登陆后。就应该再创建一个进程或者线程来维持这种长连接。心跳包的发送由客户端来发送。每20s发送一个心跳包
。如果连续三次没有收到服务器的回复。则判定客户端离线。 用户可设置自动重连或者手动重连。   那么服务器如何判断客户端的异常离线呢。
也可以通过心跳包来解决。应该在心跳包进程中可以创建两个线程。一个接收客户端的心跳包。一个给客户端发送心跳包。处于服务器的性能。服务器给客户端发送的
心跳包时间间隔为30s。若一次没收到客户端的回复。则先发送异常信息(误差解决方案)然后关闭客户端的连接。


嗯

接下来就是消息转发。

文本消息：
	还没思路

图片消息：
	截图直接转换为字节流。

	大文件则通过HTTP来转发。

文件传输:
	离线：
		通过HTTP上传到服务器。
		然后接收方从服务器下载
	在线：
		打洞？
		或者服务器在线转发。

这里难点还是有的。数据转发，安全的并发处理。

